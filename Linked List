class Node:
    def __init__(self, node_data = None):
        self.data = node_data
        self.next = None

class SLinkedList:
    def __init__(self):
        self.head = None
        self.tail = None

    def insert_node_at_end(self, node_data):
        node = Node(node_data)
        if not self.head:
            self.head = node
        else:
            self.tail.next = node

        self.tail = node

    def insert_node_at_begining(self, node_data):
        node = Node(node_data)
        node.next = self.head
        self.head = node

    def insert_node_in_middle(self, node_middle, node_data):
        if not node_middle:
            print("No such middle node")
            return
        node = Node(node_data)
        node.next = node_middle.next
        node_middle.next = node

    def delete_position(self, position):
        if position == 0:
            self.head = self.head.next
        else:
            temp = self.head
            for i in range(position - 1):
                temp = temp.next
            temp.next = temp.next.next

    def delete_value(self, node_data):
        temp = self.head
        position = 0
        while temp.data != node_data:
            temp = temp.next
            position += 1
            if temp == self.tail:
                print("No such data.")
                return
        self.delete_position(position)


    def printLinkedList(self):
        temp = self.head
        while temp:
            print(temp.data)
            temp = temp.next

llist_count = int(input())
llist = SLinkedList()

for i in range(llist_count):
    llist_item = int(input())
    llist.insert_node_at_end(llist_item)

llist.delete_value(4)
llist.printLinkedList()
